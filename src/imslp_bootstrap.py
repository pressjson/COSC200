#!/usr/bin/env python3
"""
this makes all of the images ready to be chunked.

1. download the pdf files from IMSLP
2. converts the pdf files into JPEG files
3. converts the JPEG files into high/low quality image pairs
"""

import os
import subprocess
import time
import sys


def get_imslp_files() -> None:
    """
    sets up ../data and curls files from IMSLP (see imslp_urls.txt for the full list of files)

    for each pdf file in imslp_urls.txt, a pdf file is downloaded into ../data/pdf_files

    dependencies:
        curl

    """
    t = time.time()
    print("\n--- Getting files from IMSLP ---")
    url_file = "imslp_urls.txt"

    if not os.path.exists("../data/pdf_files"):
        os.makedirs("../data/pdf_files")

    with open(url_file, "r") as infile:

        i = 0
        for url in infile:
            url = url.strip()
            print(f"\nDownloading file {i + 1}: {url}")
            try:
                command = [
                    "curl",
                    "-s",
                    url,
                    "--output",
                    "../data/pdf_files/" + str(i) + ".pdf",
                ]
                subprocess.run(command)
            except Exception:
                print(f"\nSomething went wrong with curling {url}")
                sys.exit(1)
            # print(command)
            i = i + 1
            print("Sleeping")
            time.sleep(3)  # so IMSLP doesn't get mad, adjust as needed

    print("-" * 50)
    print(f"All files successfully downloaded in {time.time() - t:.2f}s.")


def make_images(
    input_path="../data/pdf_files/", output_path="../data/images", output_name="0.jpg"
):
    """
    converts the files input_path into a series of jpg files in output_path

    dependencies:
        imagemagick

    args:
        input_path: the path of the pdf file, with file extension
        output_path: the place where the images are supposed to be saved
        output_name: name of the file to be outputted, with file extension

    """

    if not os.path.exists(output_path):
        os.makedirs(output_path)

    try:
        command = [
            "magick",
            "-density",
            "300",
            input_path,
            os.path.join(output_path, output_name),
        ]
        print(f"Making image {output_name} at {output_path}")
        # print(command)
        subprocess.check_output(command)
    except Exception:
        print(f"\nSomething went wrong with {input_path}")
        sys.exit(1)


def make_jpegs():
    """
    converts the jpgs in ../data/images into high quality/low quality image pairs in ../data/images/i

    low quality images are generated by shrinking the size to 25% and using jpeg artifacting with a
    compression quality of 15, and then rescaling the shrinked image to its original size

    dependencies:
        imagemagick
        the execution of make_images()

    args:
        cleanup (bool): toggles whether or not to remove the pdf images from ../data/images

    @TODO: clean this up
    """
    t = time.time()

    print("\n--- Making JPEGs out of the PDFs ---")
    i = 0
    path = "../data/pdf_files"
    for pdf_file in sorted(os.listdir("../data/pdf_files")):
        file_size = os.path.get_size(os.path.join(path, pdf_file))
        if file_size < 2000:
            print(f"Warning: file {pdf_file} is probably not a valid file. Skipping...")
            continue
        make_images(
            input_path=os.path.join(path, pdf_file), output_name=str(i) + ".jpg"
        )
        i = i + 1
    print("-" * 50)
    print(f"\nAll PDF files converted to JPEGs in {time.time() - t:.2f}s.")


def make_image_pairs(cleanup=True):
    """
    makes high and low quality image pairs out of the jpegs created by make_jpegs()
    """

    t = time.time()

    print("\n--- Making image pairs ---\n")
    i = 0

    for image in os.listdir("../data/images"):
        if not image.endswith(".jpg"):
            continue
        if not os.path.exists(os.path.join("../data/images", str(i))):
            os.makedirs(os.path.join("../data/images", str(i)))
        print(f"\nMaking high quality images at ../data/images/{i}/hq.jpg")
        try:
            output_path = os.path.join("../data/images", str(i))
            command = [
                "magick",
                "-quality",
                "100",
                "../data/images/" + image,
                os.path.join(output_path, "hq.jpg"),
            ]
            # print(command)
            subprocess.run(command)

            print(f"Making low quality images at ../data/images/{i}/lq.jpg")
            command = [
                "magick",
                "../data/images/" + image,
                "-resize",
                "25%",
                "-quality",
                "15",
                os.path.join(output_path, "lq.jpg"),
            ]
            # print(command)
            subprocess.run(command)

            command = [
                "magick",
                output_path + "/lq.jpg",
                "-resize",
                "400%",
                "-quality",
                "100",
                os.path.join(output_path, "lq.jpg"),
            ]
            # print(command)
            subprocess.run(command)
        except subprocess.CalledProcessError as grepexc:
            print("Error", grepexc.returncode, grepexc.output)
            print("Something went wrong with ImageMagick, stopping...")
            sys.exit(1)
        i = i + 1

    if cleanup:
        print(f"Cleaning up {image}")
        subprocess.run(["rm", "../data/images/" + image])

    print("-" * 50)
    print(f"\nMade all pairs in {time.time() - t:.2f}s.")


if __name__ == "__main__":
    t = time.time()
    try:
        subprocess.check_output(["magick", "--help"])
    except subprocess.CalledProcessError as grepexc:
        print("Error", grepexc.returncode, grepexc.output)
        print("Try installing ImageMagick?")

    try:
        subprocess.check_output(["curl", "--help"])
    except subprocess.CalledProcessError as grepexc:
        print("Error", grepexc.returncode, grepexc.output)
        print("You really don't have curl?")

    get_imslp_files()
    make_jpegs()
    make_image_pairs()
    print("-" * 50)
    print(
        f"\nAll bootstrapping completed in {time.time() - t:.2f}s. Now, use the chunker."
    )
    print("-" * 50)
